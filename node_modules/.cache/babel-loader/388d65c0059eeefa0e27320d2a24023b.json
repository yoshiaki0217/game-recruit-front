{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function () {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nvar Connector = /*#__PURE__*/function () {\n  /**\r\n   * Create a new class instance.\r\n   */\n  function Connector(options) {\n    _classCallCheck(this, Connector);\n    /**\r\n     * Default connector options.\r\n     */\n\n\n    this._defaultOptions = {\n      auth: {\n        headers: {}\n      },\n      authEndpoint: '/broadcasting/auth',\n      broadcaster: 'pusher',\n      csrfToken: null,\n      host: null,\n      key: null,\n      namespace: 'App.Events'\n    };\n    this.setOptions(options);\n    this.connect();\n  }\n  /**\r\n   * Merge the custom options with the defaults.\r\n   */\n\n\n  _createClass(Connector, [{\n    key: \"setOptions\",\n    value: function setOptions(options) {\n      this.options = _extends(this._defaultOptions, options);\n\n      if (this.csrfToken()) {\n        this.options.auth.headers['X-CSRF-TOKEN'] = this.csrfToken();\n      }\n\n      return options;\n    }\n    /**\r\n     * Extract the CSRF token from the page.\r\n     */\n\n  }, {\n    key: \"csrfToken\",\n    value: function csrfToken() {\n      var selector;\n\n      if (typeof window !== 'undefined' && window['Laravel'] && window['Laravel'].csrfToken) {\n        return window['Laravel'].csrfToken;\n      } else if (this.options.csrfToken) {\n        return this.options.csrfToken;\n      } else if (typeof document !== 'undefined' && typeof document.querySelector === 'function' && (selector = document.querySelector('meta[name=\"csrf-token\"]'))) {\n        return selector.getAttribute('content');\n      }\n\n      return null;\n    }\n  }]);\n\n  return Connector;\n}();\n/**\r\n * This class represents a basic channel.\r\n */\n\n\nvar Channel = /*#__PURE__*/function () {\n  function Channel() {\n    _classCallCheck(this, Channel);\n  }\n\n  _createClass(Channel, [{\n    key: \"listenForWhisper\",\n\n    /**\r\n     * Listen for a whisper event on the channel instance.\r\n     */\n    value: function listenForWhisper(event, callback) {\n      return this.listen('.client-' + event, callback);\n    }\n    /**\r\n     * Listen for an event on the channel instance.\r\n     */\n\n  }, {\n    key: \"notification\",\n    value: function notification(callback) {\n      return this.listen('.Illuminate\\\\Notifications\\\\Events\\\\BroadcastNotificationCreated', callback);\n    }\n    /**\r\n     * Stop listening for a whisper event on the channel instance.\r\n     */\n\n  }, {\n    key: \"stopListeningForWhisper\",\n    value: function stopListeningForWhisper(event, callback) {\n      return this.stopListening('.client-' + event, callback);\n    }\n  }]);\n\n  return Channel;\n}();\n/**\r\n * Event name formatter\r\n */\n\n\nvar EventFormatter = /*#__PURE__*/function () {\n  /**\r\n   * Create a new class instance.\r\n   */\n  function EventFormatter(namespace) {\n    _classCallCheck(this, EventFormatter);\n\n    this.setNamespace(namespace);\n  }\n  /**\r\n   * Format the given event name.\r\n   */\n\n\n  _createClass(EventFormatter, [{\n    key: \"format\",\n    value: function format(event) {\n      if (event.charAt(0) === '.' || event.charAt(0) === '\\\\') {\n        return event.substr(1);\n      } else if (this.namespace) {\n        event = this.namespace + '.' + event;\n      }\n\n      return event.replace(/\\./g, '\\\\');\n    }\n    /**\r\n     * Set the event namespace.\r\n     */\n\n  }, {\n    key: \"setNamespace\",\n    value: function setNamespace(value) {\n      this.namespace = value;\n    }\n  }]);\n\n  return EventFormatter;\n}();\n/**\r\n * This class represents a Pusher channel.\r\n */\n\n\nvar PusherChannel = /*#__PURE__*/function (_Channel) {\n  _inherits(PusherChannel, _Channel);\n\n  var _super = _createSuper(PusherChannel);\n  /**\r\n   * Create a new class instance.\r\n   */\n\n\n  function PusherChannel(pusher, name, options) {\n    var _this;\n\n    _classCallCheck(this, PusherChannel);\n\n    _this = _super.call(this);\n    _this.name = name;\n    _this.pusher = pusher;\n    _this.options = options;\n    _this.eventFormatter = new EventFormatter(_this.options.namespace);\n\n    _this.subscribe();\n\n    return _this;\n  }\n  /**\r\n   * Subscribe to a Pusher channel.\r\n   */\n\n\n  _createClass(PusherChannel, [{\n    key: \"subscribe\",\n    value: function subscribe() {\n      this.subscription = this.pusher.subscribe(this.name);\n    }\n    /**\r\n     * Unsubscribe from a Pusher channel.\r\n     */\n\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe() {\n      this.pusher.unsubscribe(this.name);\n    }\n    /**\r\n     * Listen for an event on the channel instance.\r\n     */\n\n  }, {\n    key: \"listen\",\n    value: function listen(event, callback) {\n      this.on(this.eventFormatter.format(event), callback);\n      return this;\n    }\n    /**\r\n     * Listen for all events on the channel instance.\r\n     */\n\n  }, {\n    key: \"listenToAll\",\n    value: function listenToAll(callback) {\n      var _this2 = this;\n\n      this.subscription.bind_global(function (event, data) {\n        if (event.startsWith('pusher:')) {\n          return;\n        }\n\n        var namespace = _this2.options.namespace.replace(/\\./g, '\\\\');\n\n        var formattedEvent = event.startsWith(namespace) ? event.substring(namespace.length + 1) : '.' + event;\n        callback(formattedEvent, data);\n      });\n      return this;\n    }\n    /**\r\n     * Stop listening for an event on the channel instance.\r\n     */\n\n  }, {\n    key: \"stopListening\",\n    value: function stopListening(event, callback) {\n      if (callback) {\n        this.subscription.unbind(this.eventFormatter.format(event), callback);\n      } else {\n        this.subscription.unbind(this.eventFormatter.format(event));\n      }\n\n      return this;\n    }\n    /**\r\n     * Stop listening for all events on the channel instance.\r\n     */\n\n  }, {\n    key: \"stopListeningToAll\",\n    value: function stopListeningToAll(callback) {\n      if (callback) {\n        this.subscription.unbind_global(callback);\n      } else {\n        this.subscription.unbind_global();\n      }\n\n      return this;\n    }\n    /**\r\n     * Register a callback to be called anytime a subscription succeeds.\r\n     */\n\n  }, {\n    key: \"subscribed\",\n    value: function subscribed(callback) {\n      this.on('pusher:subscription_succeeded', function () {\n        callback();\n      });\n      return this;\n    }\n    /**\r\n     * Register a callback to be called anytime a subscription error occurs.\r\n     */\n\n  }, {\n    key: \"error\",\n    value: function error(callback) {\n      this.on('pusher:subscription_error', function (status) {\n        callback(status);\n      });\n      return this;\n    }\n    /**\r\n     * Bind a channel to an event.\r\n     */\n\n  }, {\n    key: \"on\",\n    value: function on(event, callback) {\n      this.subscription.bind(event, callback);\n      return this;\n    }\n  }]);\n\n  return PusherChannel;\n}(Channel);\n/**\r\n * This class represents a Pusher private channel.\r\n */\n\n\nvar PusherPrivateChannel = /*#__PURE__*/function (_PusherChannel) {\n  _inherits(PusherPrivateChannel, _PusherChannel);\n\n  var _super = _createSuper(PusherPrivateChannel);\n\n  function PusherPrivateChannel() {\n    _classCallCheck(this, PusherPrivateChannel);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(PusherPrivateChannel, [{\n    key: \"whisper\",\n\n    /**\r\n     * Trigger client event on the channel.\r\n     */\n    value: function whisper(eventName, data) {\n      this.pusher.channels.channels[this.name].trigger(\"client-\".concat(eventName), data);\n      return this;\n    }\n  }]);\n\n  return PusherPrivateChannel;\n}(PusherChannel);\n/**\r\n * This class represents a Pusher private channel.\r\n */\n\n\nvar PusherEncryptedPrivateChannel = /*#__PURE__*/function (_PusherChannel) {\n  _inherits(PusherEncryptedPrivateChannel, _PusherChannel);\n\n  var _super = _createSuper(PusherEncryptedPrivateChannel);\n\n  function PusherEncryptedPrivateChannel() {\n    _classCallCheck(this, PusherEncryptedPrivateChannel);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(PusherEncryptedPrivateChannel, [{\n    key: \"whisper\",\n\n    /**\r\n     * Trigger client event on the channel.\r\n     */\n    value: function whisper(eventName, data) {\n      this.pusher.channels.channels[this.name].trigger(\"client-\".concat(eventName), data);\n      return this;\n    }\n  }]);\n\n  return PusherEncryptedPrivateChannel;\n}(PusherChannel);\n/**\r\n * This class represents a Pusher presence channel.\r\n */\n\n\nvar PusherPresenceChannel = /*#__PURE__*/function (_PusherChannel) {\n  _inherits(PusherPresenceChannel, _PusherChannel);\n\n  var _super = _createSuper(PusherPresenceChannel);\n\n  function PusherPresenceChannel() {\n    _classCallCheck(this, PusherPresenceChannel);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(PusherPresenceChannel, [{\n    key: \"here\",\n\n    /**\r\n     * Register a callback to be called anytime the member list changes.\r\n     */\n    value: function here(callback) {\n      this.on('pusher:subscription_succeeded', function (data) {\n        callback(Object.keys(data.members).map(function (k) {\n          return data.members[k];\n        }));\n      });\n      return this;\n    }\n    /**\r\n     * Listen for someone joining the channel.\r\n     */\n\n  }, {\n    key: \"joining\",\n    value: function joining(callback) {\n      this.on('pusher:member_added', function (member) {\n        callback(member.info);\n      });\n      return this;\n    }\n    /**\r\n     * Listen for someone leaving the channel.\r\n     */\n\n  }, {\n    key: \"leaving\",\n    value: function leaving(callback) {\n      this.on('pusher:member_removed', function (member) {\n        callback(member.info);\n      });\n      return this;\n    }\n    /**\r\n     * Trigger client event on the channel.\r\n     */\n\n  }, {\n    key: \"whisper\",\n    value: function whisper(eventName, data) {\n      this.pusher.channels.channels[this.name].trigger(\"client-\".concat(eventName), data);\n      return this;\n    }\n  }]);\n\n  return PusherPresenceChannel;\n}(PusherChannel);\n/**\r\n * This class represents a Socket.io channel.\r\n */\n\n\nvar SocketIoChannel = /*#__PURE__*/function (_Channel) {\n  _inherits(SocketIoChannel, _Channel);\n\n  var _super = _createSuper(SocketIoChannel);\n  /**\r\n   * Create a new class instance.\r\n   */\n\n\n  function SocketIoChannel(socket, name, options) {\n    var _this;\n\n    _classCallCheck(this, SocketIoChannel);\n\n    _this = _super.call(this);\n    /**\r\n     * The event callbacks applied to the socket.\r\n     */\n\n    _this.events = {};\n    /**\r\n     * User supplied callbacks for events on this channel.\r\n     */\n\n    _this.listeners = {};\n    _this.name = name;\n    _this.socket = socket;\n    _this.options = options;\n    _this.eventFormatter = new EventFormatter(_this.options.namespace);\n\n    _this.subscribe();\n\n    return _this;\n  }\n  /**\r\n   * Subscribe to a Socket.io channel.\r\n   */\n\n\n  _createClass(SocketIoChannel, [{\n    key: \"subscribe\",\n    value: function subscribe() {\n      this.socket.emit('subscribe', {\n        channel: this.name,\n        auth: this.options.auth || {}\n      });\n    }\n    /**\r\n     * Unsubscribe from channel and ubind event callbacks.\r\n     */\n\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe() {\n      this.unbind();\n      this.socket.emit('unsubscribe', {\n        channel: this.name,\n        auth: this.options.auth || {}\n      });\n    }\n    /**\r\n     * Listen for an event on the channel instance.\r\n     */\n\n  }, {\n    key: \"listen\",\n    value: function listen(event, callback) {\n      this.on(this.eventFormatter.format(event), callback);\n      return this;\n    }\n    /**\r\n     * Stop listening for an event on the channel instance.\r\n     */\n\n  }, {\n    key: \"stopListening\",\n    value: function stopListening(event, callback) {\n      this.unbindEvent(this.eventFormatter.format(event), callback);\n      return this;\n    }\n    /**\r\n     * Register a callback to be called anytime a subscription succeeds.\r\n     */\n\n  }, {\n    key: \"subscribed\",\n    value: function subscribed(callback) {\n      this.on('connect', function (socket) {\n        callback(socket);\n      });\n      return this;\n    }\n    /**\r\n     * Register a callback to be called anytime an error occurs.\r\n     */\n\n  }, {\n    key: \"error\",\n    value: function error(callback) {\n      return this;\n    }\n    /**\r\n     * Bind the channel's socket to an event and store the callback.\r\n     */\n\n  }, {\n    key: \"on\",\n    value: function on(event, callback) {\n      var _this2 = this;\n\n      this.listeners[event] = this.listeners[event] || [];\n\n      if (!this.events[event]) {\n        this.events[event] = function (channel, data) {\n          if (_this2.name === channel && _this2.listeners[event]) {\n            _this2.listeners[event].forEach(function (cb) {\n              return cb(data);\n            });\n          }\n        };\n\n        this.socket.on(event, this.events[event]);\n      }\n\n      this.listeners[event].push(callback);\n      return this;\n    }\n    /**\r\n     * Unbind the channel's socket from all stored event callbacks.\r\n     */\n\n  }, {\n    key: \"unbind\",\n    value: function unbind() {\n      var _this3 = this;\n\n      Object.keys(this.events).forEach(function (event) {\n        _this3.unbindEvent(event);\n      });\n    }\n    /**\r\n     * Unbind the listeners for the given event.\r\n     */\n\n  }, {\n    key: \"unbindEvent\",\n    value: function unbindEvent(event, callback) {\n      this.listeners[event] = this.listeners[event] || [];\n\n      if (callback) {\n        this.listeners[event] = this.listeners[event].filter(function (cb) {\n          return cb !== callback;\n        });\n      }\n\n      if (!callback || this.listeners[event].length === 0) {\n        if (this.events[event]) {\n          this.socket.removeListener(event, this.events[event]);\n          delete this.events[event];\n        }\n\n        delete this.listeners[event];\n      }\n    }\n  }]);\n\n  return SocketIoChannel;\n}(Channel);\n/**\r\n * This class represents a Socket.io private channel.\r\n */\n\n\nvar SocketIoPrivateChannel = /*#__PURE__*/function (_SocketIoChannel) {\n  _inherits(SocketIoPrivateChannel, _SocketIoChannel);\n\n  var _super = _createSuper(SocketIoPrivateChannel);\n\n  function SocketIoPrivateChannel() {\n    _classCallCheck(this, SocketIoPrivateChannel);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(SocketIoPrivateChannel, [{\n    key: \"whisper\",\n\n    /**\r\n     * Trigger client event on the channel.\r\n     */\n    value: function whisper(eventName, data) {\n      this.socket.emit('client event', {\n        channel: this.name,\n        event: \"client-\".concat(eventName),\n        data: data\n      });\n      return this;\n    }\n  }]);\n\n  return SocketIoPrivateChannel;\n}(SocketIoChannel);\n/**\r\n * This class represents a Socket.io presence channel.\r\n */\n\n\nvar SocketIoPresenceChannel = /*#__PURE__*/function (_SocketIoPrivateChann) {\n  _inherits(SocketIoPresenceChannel, _SocketIoPrivateChann);\n\n  var _super = _createSuper(SocketIoPresenceChannel);\n\n  function SocketIoPresenceChannel() {\n    _classCallCheck(this, SocketIoPresenceChannel);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(SocketIoPresenceChannel, [{\n    key: \"here\",\n\n    /**\r\n     * Register a callback to be called anytime the member list changes.\r\n     */\n    value: function here(callback) {\n      this.on('presence:subscribed', function (members) {\n        callback(members.map(function (m) {\n          return m.user_info;\n        }));\n      });\n      return this;\n    }\n    /**\r\n     * Listen for someone joining the channel.\r\n     */\n\n  }, {\n    key: \"joining\",\n    value: function joining(callback) {\n      this.on('presence:joining', function (member) {\n        return callback(member.user_info);\n      });\n      return this;\n    }\n    /**\r\n     * Listen for someone leaving the channel.\r\n     */\n\n  }, {\n    key: \"leaving\",\n    value: function leaving(callback) {\n      this.on('presence:leaving', function (member) {\n        return callback(member.user_info);\n      });\n      return this;\n    }\n  }]);\n\n  return SocketIoPresenceChannel;\n}(SocketIoPrivateChannel);\n/**\r\n * This class represents a null channel.\r\n */\n\n\nvar NullChannel = /*#__PURE__*/function (_Channel) {\n  _inherits(NullChannel, _Channel);\n\n  var _super = _createSuper(NullChannel);\n\n  function NullChannel() {\n    _classCallCheck(this, NullChannel);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(NullChannel, [{\n    key: \"subscribe\",\n\n    /**\r\n     * Subscribe to a channel.\r\n     */\n    value: function subscribe() {} //\n\n    /**\r\n     * Unsubscribe from a channel.\r\n     */\n\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe() {} //\n\n    /**\r\n     * Listen for an event on the channel instance.\r\n     */\n\n  }, {\n    key: \"listen\",\n    value: function listen(event, callback) {\n      return this;\n    }\n    /**\r\n     * Stop listening for an event on the channel instance.\r\n     */\n\n  }, {\n    key: \"stopListening\",\n    value: function stopListening(event, callback) {\n      return this;\n    }\n    /**\r\n     * Register a callback to be called anytime a subscription succeeds.\r\n     */\n\n  }, {\n    key: \"subscribed\",\n    value: function subscribed(callback) {\n      return this;\n    }\n    /**\r\n     * Register a callback to be called anytime an error occurs.\r\n     */\n\n  }, {\n    key: \"error\",\n    value: function error(callback) {\n      return this;\n    }\n    /**\r\n     * Bind a channel to an event.\r\n     */\n\n  }, {\n    key: \"on\",\n    value: function on(event, callback) {\n      return this;\n    }\n  }]);\n\n  return NullChannel;\n}(Channel);\n/**\r\n * This class represents a null private channel.\r\n */\n\n\nvar NullPrivateChannel = /*#__PURE__*/function (_NullChannel) {\n  _inherits(NullPrivateChannel, _NullChannel);\n\n  var _super = _createSuper(NullPrivateChannel);\n\n  function NullPrivateChannel() {\n    _classCallCheck(this, NullPrivateChannel);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(NullPrivateChannel, [{\n    key: \"whisper\",\n\n    /**\r\n     * Trigger client event on the channel.\r\n     */\n    value: function whisper(eventName, data) {\n      return this;\n    }\n  }]);\n\n  return NullPrivateChannel;\n}(NullChannel);\n/**\r\n * This class represents a null presence channel.\r\n */\n\n\nvar NullPresenceChannel = /*#__PURE__*/function (_NullChannel) {\n  _inherits(NullPresenceChannel, _NullChannel);\n\n  var _super = _createSuper(NullPresenceChannel);\n\n  function NullPresenceChannel() {\n    _classCallCheck(this, NullPresenceChannel);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(NullPresenceChannel, [{\n    key: \"here\",\n\n    /**\r\n     * Register a callback to be called anytime the member list changes.\r\n     */\n    value: function here(callback) {\n      return this;\n    }\n    /**\r\n     * Listen for someone joining the channel.\r\n     */\n\n  }, {\n    key: \"joining\",\n    value: function joining(callback) {\n      return this;\n    }\n    /**\r\n     * Listen for someone leaving the channel.\r\n     */\n\n  }, {\n    key: \"leaving\",\n    value: function leaving(callback) {\n      return this;\n    }\n    /**\r\n     * Trigger client event on the channel.\r\n     */\n\n  }, {\n    key: \"whisper\",\n    value: function whisper(eventName, data) {\n      return this;\n    }\n  }]);\n\n  return NullPresenceChannel;\n}(NullChannel);\n/**\r\n * This class creates a connector to Pusher.\r\n */\n\n\nvar PusherConnector = /*#__PURE__*/function (_Connector) {\n  _inherits(PusherConnector, _Connector);\n\n  var _super = _createSuper(PusherConnector);\n\n  function PusherConnector() {\n    var _this;\n\n    _classCallCheck(this, PusherConnector);\n\n    _this = _super.apply(this, arguments);\n    /**\r\n     * All of the subscribed channel names.\r\n     */\n\n    _this.channels = {};\n    return _this;\n  }\n  /**\r\n   * Create a fresh Pusher connection.\r\n   */\n\n\n  _createClass(PusherConnector, [{\n    key: \"connect\",\n    value: function connect() {\n      if (typeof this.options.client !== 'undefined') {\n        this.pusher = this.options.client;\n      } else {\n        this.pusher = new Pusher(this.options.key, this.options);\n      }\n    }\n    /**\r\n     * Listen for an event on a channel instance.\r\n     */\n\n  }, {\n    key: \"listen\",\n    value: function listen(name, event, callback) {\n      return this.channel(name).listen(event, callback);\n    }\n    /**\r\n     * Get a channel instance by name.\r\n     */\n\n  }, {\n    key: \"channel\",\n    value: function channel(name) {\n      if (!this.channels[name]) {\n        this.channels[name] = new PusherChannel(this.pusher, name, this.options);\n      }\n\n      return this.channels[name];\n    }\n    /**\r\n     * Get a private channel instance by name.\r\n     */\n\n  }, {\n    key: \"privateChannel\",\n    value: function privateChannel(name) {\n      if (!this.channels['private-' + name]) {\n        this.channels['private-' + name] = new PusherPrivateChannel(this.pusher, 'private-' + name, this.options);\n      }\n\n      return this.channels['private-' + name];\n    }\n    /**\r\n     * Get a private encrypted channel instance by name.\r\n     */\n\n  }, {\n    key: \"encryptedPrivateChannel\",\n    value: function encryptedPrivateChannel(name) {\n      if (!this.channels['private-encrypted-' + name]) {\n        this.channels['private-encrypted-' + name] = new PusherEncryptedPrivateChannel(this.pusher, 'private-encrypted-' + name, this.options);\n      }\n\n      return this.channels['private-encrypted-' + name];\n    }\n    /**\r\n     * Get a presence channel instance by name.\r\n     */\n\n  }, {\n    key: \"presenceChannel\",\n    value: function presenceChannel(name) {\n      if (!this.channels['presence-' + name]) {\n        this.channels['presence-' + name] = new PusherPresenceChannel(this.pusher, 'presence-' + name, this.options);\n      }\n\n      return this.channels['presence-' + name];\n    }\n    /**\r\n     * Leave the given channel, as well as its private and presence variants.\r\n     */\n\n  }, {\n    key: \"leave\",\n    value: function leave(name) {\n      var _this2 = this;\n\n      var channels = [name, 'private-' + name, 'presence-' + name];\n      channels.forEach(function (name, index) {\n        _this2.leaveChannel(name);\n      });\n    }\n    /**\r\n     * Leave the given channel.\r\n     */\n\n  }, {\n    key: \"leaveChannel\",\n    value: function leaveChannel(name) {\n      if (this.channels[name]) {\n        this.channels[name].unsubscribe();\n        delete this.channels[name];\n      }\n    }\n    /**\r\n     * Get the socket ID for the connection.\r\n     */\n\n  }, {\n    key: \"socketId\",\n    value: function socketId() {\n      return this.pusher.connection.socket_id;\n    }\n    /**\r\n     * Disconnect Pusher connection.\r\n     */\n\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      this.pusher.disconnect();\n    }\n  }]);\n\n  return PusherConnector;\n}(Connector);\n/**\r\n * This class creates a connnector to a Socket.io server.\r\n */\n\n\nvar SocketIoConnector = /*#__PURE__*/function (_Connector) {\n  _inherits(SocketIoConnector, _Connector);\n\n  var _super = _createSuper(SocketIoConnector);\n\n  function SocketIoConnector() {\n    var _this;\n\n    _classCallCheck(this, SocketIoConnector);\n\n    _this = _super.apply(this, arguments);\n    /**\r\n     * All of the subscribed channel names.\r\n     */\n\n    _this.channels = {};\n    return _this;\n  }\n  /**\r\n   * Create a fresh Socket.io connection.\r\n   */\n\n\n  _createClass(SocketIoConnector, [{\n    key: \"connect\",\n    value: function connect() {\n      var _this2 = this;\n\n      var io = this.getSocketIO();\n      this.socket = io(this.options.host, this.options);\n      this.socket.on('reconnect', function () {\n        Object.values(_this2.channels).forEach(function (channel) {\n          channel.subscribe();\n        });\n      });\n      return this.socket;\n    }\n    /**\r\n     * Get socket.io module from global scope or options.\r\n     */\n\n  }, {\n    key: \"getSocketIO\",\n    value: function getSocketIO() {\n      if (typeof this.options.client !== 'undefined') {\n        return this.options.client;\n      }\n\n      if (typeof io !== 'undefined') {\n        return io;\n      }\n\n      throw new Error('Socket.io client not found. Should be globally available or passed via options.client');\n    }\n    /**\r\n     * Listen for an event on a channel instance.\r\n     */\n\n  }, {\n    key: \"listen\",\n    value: function listen(name, event, callback) {\n      return this.channel(name).listen(event, callback);\n    }\n    /**\r\n     * Get a channel instance by name.\r\n     */\n\n  }, {\n    key: \"channel\",\n    value: function channel(name) {\n      if (!this.channels[name]) {\n        this.channels[name] = new SocketIoChannel(this.socket, name, this.options);\n      }\n\n      return this.channels[name];\n    }\n    /**\r\n     * Get a private channel instance by name.\r\n     */\n\n  }, {\n    key: \"privateChannel\",\n    value: function privateChannel(name) {\n      if (!this.channels['private-' + name]) {\n        this.channels['private-' + name] = new SocketIoPrivateChannel(this.socket, 'private-' + name, this.options);\n      }\n\n      return this.channels['private-' + name];\n    }\n    /**\r\n     * Get a presence channel instance by name.\r\n     */\n\n  }, {\n    key: \"presenceChannel\",\n    value: function presenceChannel(name) {\n      if (!this.channels['presence-' + name]) {\n        this.channels['presence-' + name] = new SocketIoPresenceChannel(this.socket, 'presence-' + name, this.options);\n      }\n\n      return this.channels['presence-' + name];\n    }\n    /**\r\n     * Leave the given channel, as well as its private and presence variants.\r\n     */\n\n  }, {\n    key: \"leave\",\n    value: function leave(name) {\n      var _this3 = this;\n\n      var channels = [name, 'private-' + name, 'presence-' + name];\n      channels.forEach(function (name) {\n        _this3.leaveChannel(name);\n      });\n    }\n    /**\r\n     * Leave the given channel.\r\n     */\n\n  }, {\n    key: \"leaveChannel\",\n    value: function leaveChannel(name) {\n      if (this.channels[name]) {\n        this.channels[name].unsubscribe();\n        delete this.channels[name];\n      }\n    }\n    /**\r\n     * Get the socket ID for the connection.\r\n     */\n\n  }, {\n    key: \"socketId\",\n    value: function socketId() {\n      return this.socket.id;\n    }\n    /**\r\n     * Disconnect Socketio connection.\r\n     */\n\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      this.socket.disconnect();\n    }\n  }]);\n\n  return SocketIoConnector;\n}(Connector);\n/**\r\n * This class creates a null connector.\r\n */\n\n\nvar NullConnector = /*#__PURE__*/function (_Connector) {\n  _inherits(NullConnector, _Connector);\n\n  var _super = _createSuper(NullConnector);\n\n  function NullConnector() {\n    var _this;\n\n    _classCallCheck(this, NullConnector);\n\n    _this = _super.apply(this, arguments);\n    /**\r\n     * All of the subscribed channel names.\r\n     */\n\n    _this.channels = {};\n    return _this;\n  }\n  /**\r\n   * Create a fresh connection.\r\n   */\n\n\n  _createClass(NullConnector, [{\n    key: \"connect\",\n    value: function connect() {} //\n\n    /**\r\n     * Listen for an event on a channel instance.\r\n     */\n\n  }, {\n    key: \"listen\",\n    value: function listen(name, event, callback) {\n      return new NullChannel();\n    }\n    /**\r\n     * Get a channel instance by name.\r\n     */\n\n  }, {\n    key: \"channel\",\n    value: function channel(name) {\n      return new NullChannel();\n    }\n    /**\r\n     * Get a private channel instance by name.\r\n     */\n\n  }, {\n    key: \"privateChannel\",\n    value: function privateChannel(name) {\n      return new NullPrivateChannel();\n    }\n    /**\r\n     * Get a presence channel instance by name.\r\n     */\n\n  }, {\n    key: \"presenceChannel\",\n    value: function presenceChannel(name) {\n      return new NullPresenceChannel();\n    }\n    /**\r\n     * Leave the given channel, as well as its private and presence variants.\r\n     */\n\n  }, {\n    key: \"leave\",\n    value: function leave(name) {} //\n\n    /**\r\n     * Leave the given channel.\r\n     */\n\n  }, {\n    key: \"leaveChannel\",\n    value: function leaveChannel(name) {} //\n\n    /**\r\n     * Get the socket ID for the connection.\r\n     */\n\n  }, {\n    key: \"socketId\",\n    value: function socketId() {\n      return 'fake-socket-id';\n    }\n    /**\r\n     * Disconnect the connection.\r\n     */\n\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {//\n    }\n  }]);\n\n  return NullConnector;\n}(Connector);\n/**\r\n * This class is the primary API for interacting with broadcasting.\r\n */\n\n\nvar Echo = /*#__PURE__*/function () {\n  /**\r\n   * Create a new class instance.\r\n   */\n  function Echo(options) {\n    _classCallCheck(this, Echo);\n\n    this.options = options;\n    this.connect();\n\n    if (!this.options.withoutInterceptors) {\n      this.registerInterceptors();\n    }\n  }\n  /**\r\n   * Get a channel instance by name.\r\n   */\n\n\n  _createClass(Echo, [{\n    key: \"channel\",\n    value: function channel(_channel) {\n      return this.connector.channel(_channel);\n    }\n    /**\r\n     * Create a new connection.\r\n     */\n\n  }, {\n    key: \"connect\",\n    value: function connect() {\n      if (this.options.broadcaster == 'pusher') {\n        this.connector = new PusherConnector(this.options);\n      } else if (this.options.broadcaster == 'socket.io') {\n        this.connector = new SocketIoConnector(this.options);\n      } else if (this.options.broadcaster == 'null') {\n        this.connector = new NullConnector(this.options);\n      } else if (typeof this.options.broadcaster == 'function') {\n        this.connector = new this.options.broadcaster(this.options);\n      }\n    }\n    /**\r\n     * Disconnect from the Echo server.\r\n     */\n\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      this.connector.disconnect();\n    }\n    /**\r\n     * Get a presence channel instance by name.\r\n     */\n\n  }, {\n    key: \"join\",\n    value: function join(channel) {\n      return this.connector.presenceChannel(channel);\n    }\n    /**\r\n     * Leave the given channel, as well as its private and presence variants.\r\n     */\n\n  }, {\n    key: \"leave\",\n    value: function leave(channel) {\n      this.connector.leave(channel);\n    }\n    /**\r\n     * Leave the given channel.\r\n     */\n\n  }, {\n    key: \"leaveChannel\",\n    value: function leaveChannel(channel) {\n      this.connector.leaveChannel(channel);\n    }\n    /**\r\n     * Listen for an event on a channel instance.\r\n     */\n\n  }, {\n    key: \"listen\",\n    value: function listen(channel, event, callback) {\n      return this.connector.listen(channel, event, callback);\n    }\n    /**\r\n     * Get a private channel instance by name.\r\n     */\n\n  }, {\n    key: \"private\",\n    value: function _private(channel) {\n      return this.connector.privateChannel(channel);\n    }\n    /**\r\n     * Get a private encrypted channel instance by name.\r\n     */\n\n  }, {\n    key: \"encryptedPrivate\",\n    value: function encryptedPrivate(channel) {\n      return this.connector.encryptedPrivateChannel(channel);\n    }\n    /**\r\n     * Get the Socket ID for the connection.\r\n     */\n\n  }, {\n    key: \"socketId\",\n    value: function socketId() {\n      return this.connector.socketId();\n    }\n    /**\r\n     * Register 3rd party request interceptiors. These are used to automatically\r\n     * send a connections socket id to a Laravel app with a X-Socket-Id header.\r\n     */\n\n  }, {\n    key: \"registerInterceptors\",\n    value: function registerInterceptors() {\n      if (typeof Vue === 'function' && Vue.http) {\n        this.registerVueRequestInterceptor();\n      }\n\n      if (typeof axios === 'function') {\n        this.registerAxiosRequestInterceptor();\n      }\n\n      if (typeof jQuery === 'function') {\n        this.registerjQueryAjaxSetup();\n      }\n    }\n    /**\r\n     * Register a Vue HTTP interceptor to add the X-Socket-ID header.\r\n     */\n\n  }, {\n    key: \"registerVueRequestInterceptor\",\n    value: function registerVueRequestInterceptor() {\n      var _this = this;\n\n      Vue.http.interceptors.push(function (request, next) {\n        if (_this.socketId()) {\n          request.headers.set('X-Socket-ID', _this.socketId());\n        }\n\n        next();\n      });\n    }\n    /**\r\n     * Register an Axios HTTP interceptor to add the X-Socket-ID header.\r\n     */\n\n  }, {\n    key: \"registerAxiosRequestInterceptor\",\n    value: function registerAxiosRequestInterceptor() {\n      var _this2 = this;\n\n      axios.interceptors.request.use(function (config) {\n        if (_this2.socketId()) {\n          config.headers['X-Socket-Id'] = _this2.socketId();\n        }\n\n        return config;\n      });\n    }\n    /**\r\n     * Register jQuery AjaxPrefilter to add the X-Socket-ID header.\r\n     */\n\n  }, {\n    key: \"registerjQueryAjaxSetup\",\n    value: function registerjQueryAjaxSetup() {\n      var _this3 = this;\n\n      if (typeof jQuery.ajax != 'undefined') {\n        jQuery.ajaxPrefilter(function (options, originalOptions, xhr) {\n          if (_this3.socketId()) {\n            xhr.setRequestHeader('X-Socket-Id', _this3.socketId());\n          }\n        });\n      }\n    }\n  }]);\n\n  return Echo;\n}();\n\nexport default Echo;","map":{"version":3,"sources":["/usr/src/app/node_modules/laravel-echo/dist/echo.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","_extends","assign","arguments","source","hasOwnProperty","call","apply","_inherits","subClass","superClass","create","constructor","value","_setPrototypeOf","_getPrototypeOf","o","setPrototypeOf","getPrototypeOf","__proto__","p","_isNativeReflectConstruct","Reflect","construct","sham","Proxy","Date","toString","e","_assertThisInitialized","self","ReferenceError","_possibleConstructorReturn","_createSuper","Derived","hasNativeReflectConstruct","Super","result","NewTarget","Connector","options","_defaultOptions","auth","headers","authEndpoint","broadcaster","csrfToken","host","namespace","setOptions","connect","selector","window","document","querySelector","getAttribute","Channel","listenForWhisper","event","callback","listen","notification","stopListeningForWhisper","stopListening","EventFormatter","setNamespace","format","charAt","substr","replace","PusherChannel","_Channel","_super","pusher","name","_this","eventFormatter","subscribe","subscription","unsubscribe","on","listenToAll","_this2","bind_global","data","startsWith","formattedEvent","substring","unbind","stopListeningToAll","unbind_global","subscribed","error","status","bind","PusherPrivateChannel","_PusherChannel","whisper","eventName","channels","trigger","concat","PusherEncryptedPrivateChannel","PusherPresenceChannel","here","keys","members","map","k","joining","member","info","leaving","SocketIoChannel","socket","events","listeners","emit","channel","unbindEvent","forEach","cb","push","_this3","filter","removeListener","SocketIoPrivateChannel","_SocketIoChannel","SocketIoPresenceChannel","_SocketIoPrivateChann","m","user_info","NullChannel","NullPrivateChannel","_NullChannel","NullPresenceChannel","PusherConnector","_Connector","client","Pusher","privateChannel","encryptedPrivateChannel","presenceChannel","leave","index","leaveChannel","socketId","connection","socket_id","disconnect","SocketIoConnector","io","getSocketIO","values","Error","id","NullConnector","Echo","withoutInterceptors","registerInterceptors","_channel","connector","join","_private","encryptedPrivate","Vue","http","registerVueRequestInterceptor","axios","registerAxiosRequestInterceptor","jQuery","registerjQueryAjaxSetup","interceptors","request","next","set","use","config","ajax","ajaxPrefilter","originalOptions","xhr","setRequestHeader"],"mappings":"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","sourcesContent":["function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function () {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nvar Connector = /*#__PURE__*/function () {\n  /**\r\n   * Create a new class instance.\r\n   */\n  function Connector(options) {\n    _classCallCheck(this, Connector);\n\n    /**\r\n     * Default connector options.\r\n     */\n    this._defaultOptions = {\n      auth: {\n        headers: {}\n      },\n      authEndpoint: '/broadcasting/auth',\n      broadcaster: 'pusher',\n      csrfToken: null,\n      host: null,\n      key: null,\n      namespace: 'App.Events'\n    };\n    this.setOptions(options);\n    this.connect();\n  }\n  /**\r\n   * Merge the custom options with the defaults.\r\n   */\n\n\n  _createClass(Connector, [{\n    key: \"setOptions\",\n    value: function setOptions(options) {\n      this.options = _extends(this._defaultOptions, options);\n\n      if (this.csrfToken()) {\n        this.options.auth.headers['X-CSRF-TOKEN'] = this.csrfToken();\n      }\n\n      return options;\n    }\n    /**\r\n     * Extract the CSRF token from the page.\r\n     */\n\n  }, {\n    key: \"csrfToken\",\n    value: function csrfToken() {\n      var selector;\n\n      if (typeof window !== 'undefined' && window['Laravel'] && window['Laravel'].csrfToken) {\n        return window['Laravel'].csrfToken;\n      } else if (this.options.csrfToken) {\n        return this.options.csrfToken;\n      } else if (typeof document !== 'undefined' && typeof document.querySelector === 'function' && (selector = document.querySelector('meta[name=\"csrf-token\"]'))) {\n        return selector.getAttribute('content');\n      }\n\n      return null;\n    }\n  }]);\n\n  return Connector;\n}();\n\n/**\r\n * This class represents a basic channel.\r\n */\nvar Channel = /*#__PURE__*/function () {\n  function Channel() {\n    _classCallCheck(this, Channel);\n  }\n\n  _createClass(Channel, [{\n    key: \"listenForWhisper\",\n\n    /**\r\n     * Listen for a whisper event on the channel instance.\r\n     */\n    value: function listenForWhisper(event, callback) {\n      return this.listen('.client-' + event, callback);\n    }\n    /**\r\n     * Listen for an event on the channel instance.\r\n     */\n\n  }, {\n    key: \"notification\",\n    value: function notification(callback) {\n      return this.listen('.Illuminate\\\\Notifications\\\\Events\\\\BroadcastNotificationCreated', callback);\n    }\n    /**\r\n     * Stop listening for a whisper event on the channel instance.\r\n     */\n\n  }, {\n    key: \"stopListeningForWhisper\",\n    value: function stopListeningForWhisper(event, callback) {\n      return this.stopListening('.client-' + event, callback);\n    }\n  }]);\n\n  return Channel;\n}();\n\n/**\r\n * Event name formatter\r\n */\nvar EventFormatter = /*#__PURE__*/function () {\n  /**\r\n   * Create a new class instance.\r\n   */\n  function EventFormatter(namespace) {\n    _classCallCheck(this, EventFormatter);\n\n    this.setNamespace(namespace);\n  }\n  /**\r\n   * Format the given event name.\r\n   */\n\n\n  _createClass(EventFormatter, [{\n    key: \"format\",\n    value: function format(event) {\n      if (event.charAt(0) === '.' || event.charAt(0) === '\\\\') {\n        return event.substr(1);\n      } else if (this.namespace) {\n        event = this.namespace + '.' + event;\n      }\n\n      return event.replace(/\\./g, '\\\\');\n    }\n    /**\r\n     * Set the event namespace.\r\n     */\n\n  }, {\n    key: \"setNamespace\",\n    value: function setNamespace(value) {\n      this.namespace = value;\n    }\n  }]);\n\n  return EventFormatter;\n}();\n\n/**\r\n * This class represents a Pusher channel.\r\n */\n\nvar PusherChannel = /*#__PURE__*/function (_Channel) {\n  _inherits(PusherChannel, _Channel);\n\n  var _super = _createSuper(PusherChannel);\n\n  /**\r\n   * Create a new class instance.\r\n   */\n  function PusherChannel(pusher, name, options) {\n    var _this;\n\n    _classCallCheck(this, PusherChannel);\n\n    _this = _super.call(this);\n    _this.name = name;\n    _this.pusher = pusher;\n    _this.options = options;\n    _this.eventFormatter = new EventFormatter(_this.options.namespace);\n\n    _this.subscribe();\n\n    return _this;\n  }\n  /**\r\n   * Subscribe to a Pusher channel.\r\n   */\n\n\n  _createClass(PusherChannel, [{\n    key: \"subscribe\",\n    value: function subscribe() {\n      this.subscription = this.pusher.subscribe(this.name);\n    }\n    /**\r\n     * Unsubscribe from a Pusher channel.\r\n     */\n\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe() {\n      this.pusher.unsubscribe(this.name);\n    }\n    /**\r\n     * Listen for an event on the channel instance.\r\n     */\n\n  }, {\n    key: \"listen\",\n    value: function listen(event, callback) {\n      this.on(this.eventFormatter.format(event), callback);\n      return this;\n    }\n    /**\r\n     * Listen for all events on the channel instance.\r\n     */\n\n  }, {\n    key: \"listenToAll\",\n    value: function listenToAll(callback) {\n      var _this2 = this;\n\n      this.subscription.bind_global(function (event, data) {\n        if (event.startsWith('pusher:')) {\n          return;\n        }\n\n        var namespace = _this2.options.namespace.replace(/\\./g, '\\\\');\n\n        var formattedEvent = event.startsWith(namespace) ? event.substring(namespace.length + 1) : '.' + event;\n        callback(formattedEvent, data);\n      });\n      return this;\n    }\n    /**\r\n     * Stop listening for an event on the channel instance.\r\n     */\n\n  }, {\n    key: \"stopListening\",\n    value: function stopListening(event, callback) {\n      if (callback) {\n        this.subscription.unbind(this.eventFormatter.format(event), callback);\n      } else {\n        this.subscription.unbind(this.eventFormatter.format(event));\n      }\n\n      return this;\n    }\n    /**\r\n     * Stop listening for all events on the channel instance.\r\n     */\n\n  }, {\n    key: \"stopListeningToAll\",\n    value: function stopListeningToAll(callback) {\n      if (callback) {\n        this.subscription.unbind_global(callback);\n      } else {\n        this.subscription.unbind_global();\n      }\n\n      return this;\n    }\n    /**\r\n     * Register a callback to be called anytime a subscription succeeds.\r\n     */\n\n  }, {\n    key: \"subscribed\",\n    value: function subscribed(callback) {\n      this.on('pusher:subscription_succeeded', function () {\n        callback();\n      });\n      return this;\n    }\n    /**\r\n     * Register a callback to be called anytime a subscription error occurs.\r\n     */\n\n  }, {\n    key: \"error\",\n    value: function error(callback) {\n      this.on('pusher:subscription_error', function (status) {\n        callback(status);\n      });\n      return this;\n    }\n    /**\r\n     * Bind a channel to an event.\r\n     */\n\n  }, {\n    key: \"on\",\n    value: function on(event, callback) {\n      this.subscription.bind(event, callback);\n      return this;\n    }\n  }]);\n\n  return PusherChannel;\n}(Channel);\n\n/**\r\n * This class represents a Pusher private channel.\r\n */\n\nvar PusherPrivateChannel = /*#__PURE__*/function (_PusherChannel) {\n  _inherits(PusherPrivateChannel, _PusherChannel);\n\n  var _super = _createSuper(PusherPrivateChannel);\n\n  function PusherPrivateChannel() {\n    _classCallCheck(this, PusherPrivateChannel);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(PusherPrivateChannel, [{\n    key: \"whisper\",\n\n    /**\r\n     * Trigger client event on the channel.\r\n     */\n    value: function whisper(eventName, data) {\n      this.pusher.channels.channels[this.name].trigger(\"client-\".concat(eventName), data);\n      return this;\n    }\n  }]);\n\n  return PusherPrivateChannel;\n}(PusherChannel);\n\n/**\r\n * This class represents a Pusher private channel.\r\n */\n\nvar PusherEncryptedPrivateChannel = /*#__PURE__*/function (_PusherChannel) {\n  _inherits(PusherEncryptedPrivateChannel, _PusherChannel);\n\n  var _super = _createSuper(PusherEncryptedPrivateChannel);\n\n  function PusherEncryptedPrivateChannel() {\n    _classCallCheck(this, PusherEncryptedPrivateChannel);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(PusherEncryptedPrivateChannel, [{\n    key: \"whisper\",\n\n    /**\r\n     * Trigger client event on the channel.\r\n     */\n    value: function whisper(eventName, data) {\n      this.pusher.channels.channels[this.name].trigger(\"client-\".concat(eventName), data);\n      return this;\n    }\n  }]);\n\n  return PusherEncryptedPrivateChannel;\n}(PusherChannel);\n\n/**\r\n * This class represents a Pusher presence channel.\r\n */\n\nvar PusherPresenceChannel = /*#__PURE__*/function (_PusherChannel) {\n  _inherits(PusherPresenceChannel, _PusherChannel);\n\n  var _super = _createSuper(PusherPresenceChannel);\n\n  function PusherPresenceChannel() {\n    _classCallCheck(this, PusherPresenceChannel);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(PusherPresenceChannel, [{\n    key: \"here\",\n\n    /**\r\n     * Register a callback to be called anytime the member list changes.\r\n     */\n    value: function here(callback) {\n      this.on('pusher:subscription_succeeded', function (data) {\n        callback(Object.keys(data.members).map(function (k) {\n          return data.members[k];\n        }));\n      });\n      return this;\n    }\n    /**\r\n     * Listen for someone joining the channel.\r\n     */\n\n  }, {\n    key: \"joining\",\n    value: function joining(callback) {\n      this.on('pusher:member_added', function (member) {\n        callback(member.info);\n      });\n      return this;\n    }\n    /**\r\n     * Listen for someone leaving the channel.\r\n     */\n\n  }, {\n    key: \"leaving\",\n    value: function leaving(callback) {\n      this.on('pusher:member_removed', function (member) {\n        callback(member.info);\n      });\n      return this;\n    }\n    /**\r\n     * Trigger client event on the channel.\r\n     */\n\n  }, {\n    key: \"whisper\",\n    value: function whisper(eventName, data) {\n      this.pusher.channels.channels[this.name].trigger(\"client-\".concat(eventName), data);\n      return this;\n    }\n  }]);\n\n  return PusherPresenceChannel;\n}(PusherChannel);\n\n/**\r\n * This class represents a Socket.io channel.\r\n */\n\nvar SocketIoChannel = /*#__PURE__*/function (_Channel) {\n  _inherits(SocketIoChannel, _Channel);\n\n  var _super = _createSuper(SocketIoChannel);\n\n  /**\r\n   * Create a new class instance.\r\n   */\n  function SocketIoChannel(socket, name, options) {\n    var _this;\n\n    _classCallCheck(this, SocketIoChannel);\n\n    _this = _super.call(this);\n    /**\r\n     * The event callbacks applied to the socket.\r\n     */\n\n    _this.events = {};\n    /**\r\n     * User supplied callbacks for events on this channel.\r\n     */\n\n    _this.listeners = {};\n    _this.name = name;\n    _this.socket = socket;\n    _this.options = options;\n    _this.eventFormatter = new EventFormatter(_this.options.namespace);\n\n    _this.subscribe();\n\n    return _this;\n  }\n  /**\r\n   * Subscribe to a Socket.io channel.\r\n   */\n\n\n  _createClass(SocketIoChannel, [{\n    key: \"subscribe\",\n    value: function subscribe() {\n      this.socket.emit('subscribe', {\n        channel: this.name,\n        auth: this.options.auth || {}\n      });\n    }\n    /**\r\n     * Unsubscribe from channel and ubind event callbacks.\r\n     */\n\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe() {\n      this.unbind();\n      this.socket.emit('unsubscribe', {\n        channel: this.name,\n        auth: this.options.auth || {}\n      });\n    }\n    /**\r\n     * Listen for an event on the channel instance.\r\n     */\n\n  }, {\n    key: \"listen\",\n    value: function listen(event, callback) {\n      this.on(this.eventFormatter.format(event), callback);\n      return this;\n    }\n    /**\r\n     * Stop listening for an event on the channel instance.\r\n     */\n\n  }, {\n    key: \"stopListening\",\n    value: function stopListening(event, callback) {\n      this.unbindEvent(this.eventFormatter.format(event), callback);\n      return this;\n    }\n    /**\r\n     * Register a callback to be called anytime a subscription succeeds.\r\n     */\n\n  }, {\n    key: \"subscribed\",\n    value: function subscribed(callback) {\n      this.on('connect', function (socket) {\n        callback(socket);\n      });\n      return this;\n    }\n    /**\r\n     * Register a callback to be called anytime an error occurs.\r\n     */\n\n  }, {\n    key: \"error\",\n    value: function error(callback) {\n      return this;\n    }\n    /**\r\n     * Bind the channel's socket to an event and store the callback.\r\n     */\n\n  }, {\n    key: \"on\",\n    value: function on(event, callback) {\n      var _this2 = this;\n\n      this.listeners[event] = this.listeners[event] || [];\n\n      if (!this.events[event]) {\n        this.events[event] = function (channel, data) {\n          if (_this2.name === channel && _this2.listeners[event]) {\n            _this2.listeners[event].forEach(function (cb) {\n              return cb(data);\n            });\n          }\n        };\n\n        this.socket.on(event, this.events[event]);\n      }\n\n      this.listeners[event].push(callback);\n      return this;\n    }\n    /**\r\n     * Unbind the channel's socket from all stored event callbacks.\r\n     */\n\n  }, {\n    key: \"unbind\",\n    value: function unbind() {\n      var _this3 = this;\n\n      Object.keys(this.events).forEach(function (event) {\n        _this3.unbindEvent(event);\n      });\n    }\n    /**\r\n     * Unbind the listeners for the given event.\r\n     */\n\n  }, {\n    key: \"unbindEvent\",\n    value: function unbindEvent(event, callback) {\n      this.listeners[event] = this.listeners[event] || [];\n\n      if (callback) {\n        this.listeners[event] = this.listeners[event].filter(function (cb) {\n          return cb !== callback;\n        });\n      }\n\n      if (!callback || this.listeners[event].length === 0) {\n        if (this.events[event]) {\n          this.socket.removeListener(event, this.events[event]);\n          delete this.events[event];\n        }\n\n        delete this.listeners[event];\n      }\n    }\n  }]);\n\n  return SocketIoChannel;\n}(Channel);\n\n/**\r\n * This class represents a Socket.io private channel.\r\n */\n\nvar SocketIoPrivateChannel = /*#__PURE__*/function (_SocketIoChannel) {\n  _inherits(SocketIoPrivateChannel, _SocketIoChannel);\n\n  var _super = _createSuper(SocketIoPrivateChannel);\n\n  function SocketIoPrivateChannel() {\n    _classCallCheck(this, SocketIoPrivateChannel);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(SocketIoPrivateChannel, [{\n    key: \"whisper\",\n\n    /**\r\n     * Trigger client event on the channel.\r\n     */\n    value: function whisper(eventName, data) {\n      this.socket.emit('client event', {\n        channel: this.name,\n        event: \"client-\".concat(eventName),\n        data: data\n      });\n      return this;\n    }\n  }]);\n\n  return SocketIoPrivateChannel;\n}(SocketIoChannel);\n\n/**\r\n * This class represents a Socket.io presence channel.\r\n */\n\nvar SocketIoPresenceChannel = /*#__PURE__*/function (_SocketIoPrivateChann) {\n  _inherits(SocketIoPresenceChannel, _SocketIoPrivateChann);\n\n  var _super = _createSuper(SocketIoPresenceChannel);\n\n  function SocketIoPresenceChannel() {\n    _classCallCheck(this, SocketIoPresenceChannel);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(SocketIoPresenceChannel, [{\n    key: \"here\",\n\n    /**\r\n     * Register a callback to be called anytime the member list changes.\r\n     */\n    value: function here(callback) {\n      this.on('presence:subscribed', function (members) {\n        callback(members.map(function (m) {\n          return m.user_info;\n        }));\n      });\n      return this;\n    }\n    /**\r\n     * Listen for someone joining the channel.\r\n     */\n\n  }, {\n    key: \"joining\",\n    value: function joining(callback) {\n      this.on('presence:joining', function (member) {\n        return callback(member.user_info);\n      });\n      return this;\n    }\n    /**\r\n     * Listen for someone leaving the channel.\r\n     */\n\n  }, {\n    key: \"leaving\",\n    value: function leaving(callback) {\n      this.on('presence:leaving', function (member) {\n        return callback(member.user_info);\n      });\n      return this;\n    }\n  }]);\n\n  return SocketIoPresenceChannel;\n}(SocketIoPrivateChannel);\n\n/**\r\n * This class represents a null channel.\r\n */\n\nvar NullChannel = /*#__PURE__*/function (_Channel) {\n  _inherits(NullChannel, _Channel);\n\n  var _super = _createSuper(NullChannel);\n\n  function NullChannel() {\n    _classCallCheck(this, NullChannel);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(NullChannel, [{\n    key: \"subscribe\",\n\n    /**\r\n     * Subscribe to a channel.\r\n     */\n    value: function subscribe() {} //\n\n    /**\r\n     * Unsubscribe from a channel.\r\n     */\n\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe() {} //\n\n    /**\r\n     * Listen for an event on the channel instance.\r\n     */\n\n  }, {\n    key: \"listen\",\n    value: function listen(event, callback) {\n      return this;\n    }\n    /**\r\n     * Stop listening for an event on the channel instance.\r\n     */\n\n  }, {\n    key: \"stopListening\",\n    value: function stopListening(event, callback) {\n      return this;\n    }\n    /**\r\n     * Register a callback to be called anytime a subscription succeeds.\r\n     */\n\n  }, {\n    key: \"subscribed\",\n    value: function subscribed(callback) {\n      return this;\n    }\n    /**\r\n     * Register a callback to be called anytime an error occurs.\r\n     */\n\n  }, {\n    key: \"error\",\n    value: function error(callback) {\n      return this;\n    }\n    /**\r\n     * Bind a channel to an event.\r\n     */\n\n  }, {\n    key: \"on\",\n    value: function on(event, callback) {\n      return this;\n    }\n  }]);\n\n  return NullChannel;\n}(Channel);\n\n/**\r\n * This class represents a null private channel.\r\n */\n\nvar NullPrivateChannel = /*#__PURE__*/function (_NullChannel) {\n  _inherits(NullPrivateChannel, _NullChannel);\n\n  var _super = _createSuper(NullPrivateChannel);\n\n  function NullPrivateChannel() {\n    _classCallCheck(this, NullPrivateChannel);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(NullPrivateChannel, [{\n    key: \"whisper\",\n\n    /**\r\n     * Trigger client event on the channel.\r\n     */\n    value: function whisper(eventName, data) {\n      return this;\n    }\n  }]);\n\n  return NullPrivateChannel;\n}(NullChannel);\n\n/**\r\n * This class represents a null presence channel.\r\n */\n\nvar NullPresenceChannel = /*#__PURE__*/function (_NullChannel) {\n  _inherits(NullPresenceChannel, _NullChannel);\n\n  var _super = _createSuper(NullPresenceChannel);\n\n  function NullPresenceChannel() {\n    _classCallCheck(this, NullPresenceChannel);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(NullPresenceChannel, [{\n    key: \"here\",\n\n    /**\r\n     * Register a callback to be called anytime the member list changes.\r\n     */\n    value: function here(callback) {\n      return this;\n    }\n    /**\r\n     * Listen for someone joining the channel.\r\n     */\n\n  }, {\n    key: \"joining\",\n    value: function joining(callback) {\n      return this;\n    }\n    /**\r\n     * Listen for someone leaving the channel.\r\n     */\n\n  }, {\n    key: \"leaving\",\n    value: function leaving(callback) {\n      return this;\n    }\n    /**\r\n     * Trigger client event on the channel.\r\n     */\n\n  }, {\n    key: \"whisper\",\n    value: function whisper(eventName, data) {\n      return this;\n    }\n  }]);\n\n  return NullPresenceChannel;\n}(NullChannel);\n\n/**\r\n * This class creates a connector to Pusher.\r\n */\n\nvar PusherConnector = /*#__PURE__*/function (_Connector) {\n  _inherits(PusherConnector, _Connector);\n\n  var _super = _createSuper(PusherConnector);\n\n  function PusherConnector() {\n    var _this;\n\n    _classCallCheck(this, PusherConnector);\n\n    _this = _super.apply(this, arguments);\n    /**\r\n     * All of the subscribed channel names.\r\n     */\n\n    _this.channels = {};\n    return _this;\n  }\n  /**\r\n   * Create a fresh Pusher connection.\r\n   */\n\n\n  _createClass(PusherConnector, [{\n    key: \"connect\",\n    value: function connect() {\n      if (typeof this.options.client !== 'undefined') {\n        this.pusher = this.options.client;\n      } else {\n        this.pusher = new Pusher(this.options.key, this.options);\n      }\n    }\n    /**\r\n     * Listen for an event on a channel instance.\r\n     */\n\n  }, {\n    key: \"listen\",\n    value: function listen(name, event, callback) {\n      return this.channel(name).listen(event, callback);\n    }\n    /**\r\n     * Get a channel instance by name.\r\n     */\n\n  }, {\n    key: \"channel\",\n    value: function channel(name) {\n      if (!this.channels[name]) {\n        this.channels[name] = new PusherChannel(this.pusher, name, this.options);\n      }\n\n      return this.channels[name];\n    }\n    /**\r\n     * Get a private channel instance by name.\r\n     */\n\n  }, {\n    key: \"privateChannel\",\n    value: function privateChannel(name) {\n      if (!this.channels['private-' + name]) {\n        this.channels['private-' + name] = new PusherPrivateChannel(this.pusher, 'private-' + name, this.options);\n      }\n\n      return this.channels['private-' + name];\n    }\n    /**\r\n     * Get a private encrypted channel instance by name.\r\n     */\n\n  }, {\n    key: \"encryptedPrivateChannel\",\n    value: function encryptedPrivateChannel(name) {\n      if (!this.channels['private-encrypted-' + name]) {\n        this.channels['private-encrypted-' + name] = new PusherEncryptedPrivateChannel(this.pusher, 'private-encrypted-' + name, this.options);\n      }\n\n      return this.channels['private-encrypted-' + name];\n    }\n    /**\r\n     * Get a presence channel instance by name.\r\n     */\n\n  }, {\n    key: \"presenceChannel\",\n    value: function presenceChannel(name) {\n      if (!this.channels['presence-' + name]) {\n        this.channels['presence-' + name] = new PusherPresenceChannel(this.pusher, 'presence-' + name, this.options);\n      }\n\n      return this.channels['presence-' + name];\n    }\n    /**\r\n     * Leave the given channel, as well as its private and presence variants.\r\n     */\n\n  }, {\n    key: \"leave\",\n    value: function leave(name) {\n      var _this2 = this;\n\n      var channels = [name, 'private-' + name, 'presence-' + name];\n      channels.forEach(function (name, index) {\n        _this2.leaveChannel(name);\n      });\n    }\n    /**\r\n     * Leave the given channel.\r\n     */\n\n  }, {\n    key: \"leaveChannel\",\n    value: function leaveChannel(name) {\n      if (this.channels[name]) {\n        this.channels[name].unsubscribe();\n        delete this.channels[name];\n      }\n    }\n    /**\r\n     * Get the socket ID for the connection.\r\n     */\n\n  }, {\n    key: \"socketId\",\n    value: function socketId() {\n      return this.pusher.connection.socket_id;\n    }\n    /**\r\n     * Disconnect Pusher connection.\r\n     */\n\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      this.pusher.disconnect();\n    }\n  }]);\n\n  return PusherConnector;\n}(Connector);\n\n/**\r\n * This class creates a connnector to a Socket.io server.\r\n */\n\nvar SocketIoConnector = /*#__PURE__*/function (_Connector) {\n  _inherits(SocketIoConnector, _Connector);\n\n  var _super = _createSuper(SocketIoConnector);\n\n  function SocketIoConnector() {\n    var _this;\n\n    _classCallCheck(this, SocketIoConnector);\n\n    _this = _super.apply(this, arguments);\n    /**\r\n     * All of the subscribed channel names.\r\n     */\n\n    _this.channels = {};\n    return _this;\n  }\n  /**\r\n   * Create a fresh Socket.io connection.\r\n   */\n\n\n  _createClass(SocketIoConnector, [{\n    key: \"connect\",\n    value: function connect() {\n      var _this2 = this;\n\n      var io = this.getSocketIO();\n      this.socket = io(this.options.host, this.options);\n      this.socket.on('reconnect', function () {\n        Object.values(_this2.channels).forEach(function (channel) {\n          channel.subscribe();\n        });\n      });\n      return this.socket;\n    }\n    /**\r\n     * Get socket.io module from global scope or options.\r\n     */\n\n  }, {\n    key: \"getSocketIO\",\n    value: function getSocketIO() {\n      if (typeof this.options.client !== 'undefined') {\n        return this.options.client;\n      }\n\n      if (typeof io !== 'undefined') {\n        return io;\n      }\n\n      throw new Error('Socket.io client not found. Should be globally available or passed via options.client');\n    }\n    /**\r\n     * Listen for an event on a channel instance.\r\n     */\n\n  }, {\n    key: \"listen\",\n    value: function listen(name, event, callback) {\n      return this.channel(name).listen(event, callback);\n    }\n    /**\r\n     * Get a channel instance by name.\r\n     */\n\n  }, {\n    key: \"channel\",\n    value: function channel(name) {\n      if (!this.channels[name]) {\n        this.channels[name] = new SocketIoChannel(this.socket, name, this.options);\n      }\n\n      return this.channels[name];\n    }\n    /**\r\n     * Get a private channel instance by name.\r\n     */\n\n  }, {\n    key: \"privateChannel\",\n    value: function privateChannel(name) {\n      if (!this.channels['private-' + name]) {\n        this.channels['private-' + name] = new SocketIoPrivateChannel(this.socket, 'private-' + name, this.options);\n      }\n\n      return this.channels['private-' + name];\n    }\n    /**\r\n     * Get a presence channel instance by name.\r\n     */\n\n  }, {\n    key: \"presenceChannel\",\n    value: function presenceChannel(name) {\n      if (!this.channels['presence-' + name]) {\n        this.channels['presence-' + name] = new SocketIoPresenceChannel(this.socket, 'presence-' + name, this.options);\n      }\n\n      return this.channels['presence-' + name];\n    }\n    /**\r\n     * Leave the given channel, as well as its private and presence variants.\r\n     */\n\n  }, {\n    key: \"leave\",\n    value: function leave(name) {\n      var _this3 = this;\n\n      var channels = [name, 'private-' + name, 'presence-' + name];\n      channels.forEach(function (name) {\n        _this3.leaveChannel(name);\n      });\n    }\n    /**\r\n     * Leave the given channel.\r\n     */\n\n  }, {\n    key: \"leaveChannel\",\n    value: function leaveChannel(name) {\n      if (this.channels[name]) {\n        this.channels[name].unsubscribe();\n        delete this.channels[name];\n      }\n    }\n    /**\r\n     * Get the socket ID for the connection.\r\n     */\n\n  }, {\n    key: \"socketId\",\n    value: function socketId() {\n      return this.socket.id;\n    }\n    /**\r\n     * Disconnect Socketio connection.\r\n     */\n\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      this.socket.disconnect();\n    }\n  }]);\n\n  return SocketIoConnector;\n}(Connector);\n\n/**\r\n * This class creates a null connector.\r\n */\n\nvar NullConnector = /*#__PURE__*/function (_Connector) {\n  _inherits(NullConnector, _Connector);\n\n  var _super = _createSuper(NullConnector);\n\n  function NullConnector() {\n    var _this;\n\n    _classCallCheck(this, NullConnector);\n\n    _this = _super.apply(this, arguments);\n    /**\r\n     * All of the subscribed channel names.\r\n     */\n\n    _this.channels = {};\n    return _this;\n  }\n  /**\r\n   * Create a fresh connection.\r\n   */\n\n\n  _createClass(NullConnector, [{\n    key: \"connect\",\n    value: function connect() {} //\n\n    /**\r\n     * Listen for an event on a channel instance.\r\n     */\n\n  }, {\n    key: \"listen\",\n    value: function listen(name, event, callback) {\n      return new NullChannel();\n    }\n    /**\r\n     * Get a channel instance by name.\r\n     */\n\n  }, {\n    key: \"channel\",\n    value: function channel(name) {\n      return new NullChannel();\n    }\n    /**\r\n     * Get a private channel instance by name.\r\n     */\n\n  }, {\n    key: \"privateChannel\",\n    value: function privateChannel(name) {\n      return new NullPrivateChannel();\n    }\n    /**\r\n     * Get a presence channel instance by name.\r\n     */\n\n  }, {\n    key: \"presenceChannel\",\n    value: function presenceChannel(name) {\n      return new NullPresenceChannel();\n    }\n    /**\r\n     * Leave the given channel, as well as its private and presence variants.\r\n     */\n\n  }, {\n    key: \"leave\",\n    value: function leave(name) {} //\n\n    /**\r\n     * Leave the given channel.\r\n     */\n\n  }, {\n    key: \"leaveChannel\",\n    value: function leaveChannel(name) {} //\n\n    /**\r\n     * Get the socket ID for the connection.\r\n     */\n\n  }, {\n    key: \"socketId\",\n    value: function socketId() {\n      return 'fake-socket-id';\n    }\n    /**\r\n     * Disconnect the connection.\r\n     */\n\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {//\n    }\n  }]);\n\n  return NullConnector;\n}(Connector);\n\n/**\r\n * This class is the primary API for interacting with broadcasting.\r\n */\n\nvar Echo = /*#__PURE__*/function () {\n  /**\r\n   * Create a new class instance.\r\n   */\n  function Echo(options) {\n    _classCallCheck(this, Echo);\n\n    this.options = options;\n    this.connect();\n\n    if (!this.options.withoutInterceptors) {\n      this.registerInterceptors();\n    }\n  }\n  /**\r\n   * Get a channel instance by name.\r\n   */\n\n\n  _createClass(Echo, [{\n    key: \"channel\",\n    value: function channel(_channel) {\n      return this.connector.channel(_channel);\n    }\n    /**\r\n     * Create a new connection.\r\n     */\n\n  }, {\n    key: \"connect\",\n    value: function connect() {\n      if (this.options.broadcaster == 'pusher') {\n        this.connector = new PusherConnector(this.options);\n      } else if (this.options.broadcaster == 'socket.io') {\n        this.connector = new SocketIoConnector(this.options);\n      } else if (this.options.broadcaster == 'null') {\n        this.connector = new NullConnector(this.options);\n      } else if (typeof this.options.broadcaster == 'function') {\n        this.connector = new this.options.broadcaster(this.options);\n      }\n    }\n    /**\r\n     * Disconnect from the Echo server.\r\n     */\n\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      this.connector.disconnect();\n    }\n    /**\r\n     * Get a presence channel instance by name.\r\n     */\n\n  }, {\n    key: \"join\",\n    value: function join(channel) {\n      return this.connector.presenceChannel(channel);\n    }\n    /**\r\n     * Leave the given channel, as well as its private and presence variants.\r\n     */\n\n  }, {\n    key: \"leave\",\n    value: function leave(channel) {\n      this.connector.leave(channel);\n    }\n    /**\r\n     * Leave the given channel.\r\n     */\n\n  }, {\n    key: \"leaveChannel\",\n    value: function leaveChannel(channel) {\n      this.connector.leaveChannel(channel);\n    }\n    /**\r\n     * Listen for an event on a channel instance.\r\n     */\n\n  }, {\n    key: \"listen\",\n    value: function listen(channel, event, callback) {\n      return this.connector.listen(channel, event, callback);\n    }\n    /**\r\n     * Get a private channel instance by name.\r\n     */\n\n  }, {\n    key: \"private\",\n    value: function _private(channel) {\n      return this.connector.privateChannel(channel);\n    }\n    /**\r\n     * Get a private encrypted channel instance by name.\r\n     */\n\n  }, {\n    key: \"encryptedPrivate\",\n    value: function encryptedPrivate(channel) {\n      return this.connector.encryptedPrivateChannel(channel);\n    }\n    /**\r\n     * Get the Socket ID for the connection.\r\n     */\n\n  }, {\n    key: \"socketId\",\n    value: function socketId() {\n      return this.connector.socketId();\n    }\n    /**\r\n     * Register 3rd party request interceptiors. These are used to automatically\r\n     * send a connections socket id to a Laravel app with a X-Socket-Id header.\r\n     */\n\n  }, {\n    key: \"registerInterceptors\",\n    value: function registerInterceptors() {\n      if (typeof Vue === 'function' && Vue.http) {\n        this.registerVueRequestInterceptor();\n      }\n\n      if (typeof axios === 'function') {\n        this.registerAxiosRequestInterceptor();\n      }\n\n      if (typeof jQuery === 'function') {\n        this.registerjQueryAjaxSetup();\n      }\n    }\n    /**\r\n     * Register a Vue HTTP interceptor to add the X-Socket-ID header.\r\n     */\n\n  }, {\n    key: \"registerVueRequestInterceptor\",\n    value: function registerVueRequestInterceptor() {\n      var _this = this;\n\n      Vue.http.interceptors.push(function (request, next) {\n        if (_this.socketId()) {\n          request.headers.set('X-Socket-ID', _this.socketId());\n        }\n\n        next();\n      });\n    }\n    /**\r\n     * Register an Axios HTTP interceptor to add the X-Socket-ID header.\r\n     */\n\n  }, {\n    key: \"registerAxiosRequestInterceptor\",\n    value: function registerAxiosRequestInterceptor() {\n      var _this2 = this;\n\n      axios.interceptors.request.use(function (config) {\n        if (_this2.socketId()) {\n          config.headers['X-Socket-Id'] = _this2.socketId();\n        }\n\n        return config;\n      });\n    }\n    /**\r\n     * Register jQuery AjaxPrefilter to add the X-Socket-ID header.\r\n     */\n\n  }, {\n    key: \"registerjQueryAjaxSetup\",\n    value: function registerjQueryAjaxSetup() {\n      var _this3 = this;\n\n      if (typeof jQuery.ajax != 'undefined') {\n        jQuery.ajaxPrefilter(function (options, originalOptions, xhr) {\n          if (_this3.socketId()) {\n            xhr.setRequestHeader('X-Socket-Id', _this3.socketId());\n          }\n        });\n      }\n    }\n  }]);\n\n  return Echo;\n}();\n\nexport default Echo;\n"]},"metadata":{},"sourceType":"module"}